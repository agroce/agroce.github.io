\documentclass[ComputerScience]{vita}
\usepackage{fullpage}
\usepackage{times}
\usepackage{url}

\newcommand{\comment}[1]{}

\begin{document}
  \name{\large{Alex David Groce}}
\businessAddress{Jet Propulsion Laboratory\\ 4800 Oak Grove Drive\\ Pasadena, CA 91109-8099\\  Mail Stop 301-285\\ {\bf agroce@gmail.com}}
  \homeAddress{975 San Pasqual St., Apt. 223\\ Pasadena, CA 91106 \\ 626-616-9229 \\ \\ US Citizen}

%\newcategory{Experience}
\newcategory{Teaching}
\newcategory{Research Interests}
\newcategory{Selected Presentations}
\newkind{Topics}
\newcategory{Education}
\newcategory{Professional Activities}
\newcategory{Refereed Conference and Workshop Publications}
\newcategory{Journal Publications}
\newcategory{Technical Reports}
\newcategory{Invited Seminars}
\newcategory{Invited Talks}
\newcategory{Invited Papers}
\newcategory{Panel and Committee Service}
\newkind{Expected}

\begin{vita}

%\begin{Expected Degrees}
%\end{Expected Degrees}

\begin{Education}
  \item Ph.D., {\bf Computer Science}, Carnegie Mellon University, March 2005\\ Thesis Title:  {\bf Error Explanation and Fault Localization with Distance Metrics}.\\Advisor:  Edmund Clarke

  \item B.S., {\bf Computer Science}, North Carolina State University, May 1999 (\emph{summa cum laude})
  \item B.S., {\bf Multidisciplinary Studies}, North Carolina State University, May 1999 (\emph{summa cum laude})
\item  \hspace{0.5in} Minors:  {\bf English Literature} and {\bf Science, Technology, and Society}
\end{Education}

\begin{Experience}
\item {\bf Summary:} I have nearly ten years of experience in software engineering and verification research: formulating problems, proposing algorithms and
approaches, evaluating results, applying my work to critical embedded,
aerospace, and real-time operating-system software, and presenting
concepts to researchers and students.  I contributed significantly to
the implementation and design of software analysis tools used
internationally for research, industrial application, and teaching,
including Java PathFinder 2, CBMC, MAGIC, SyMP, and the Concurrency
Workbench (NC).

  \item {\bf 4/2008--6/2008 $\cdot$ Lecturer in Computer Science,
  part-time, California Institute of Technology:} Taught CS 119,
  Reliable Software: Testing and Monitoring.  Used research and JPL
  flight system testing experiences to introduce state-of-the-art
  techniques and practical methods for testing to students, with a
  focus on automated approaches to executing software in order to find
  faults.

  \item {\bf 4/2005--present $\cdot$ Laboratory for Reliable Software,
  Jet Propulsion Laboratory:} Led test automation development and
  design, Mars Science Laboratory mission Flight Software Internal
  Test Team.  Contributed to design of telemetry systems and tested
  hardware/software interfaces for Mars Science Laboratory mission.
  Introduced new techniques for exploiting error traces in static
  analysis of programs, integrated model checking and dynamic
  analysis, developed a successful random testing approach for
  reliable file systems, and contributed to modeling and verification
  of Dawn mission launch sequence and fault protection.  Led file
  system acceptance testing for a NASA Discovery class mission; led
  model checking and random testing efforts for Mars Science
  Laboratory file storage modules; contributed to design for file
  systems used to store images, science products, and telemetry during
  spaceflight missions.  Served on design and code review panels for
  flight software and hardware systems.

  \item {\bf 8/1999--3/2005 $\cdot$ Doctoral student, Carnegie Mellon
  University:} Invented methods for error explanation and fault
  isolation using distance metrics, applied to aircraft collision
  avoidance system and real-time operating system microkernel.  Invented
  and implemented novel approaches for counterexample guided
  abstraction refinement.  Enriched teaching by incorporating research
  ideas into instruction, assignments, and evaluation in undergraduate
  classes.

  \item {\bf 5/2002--8/2002 $\cdot$ Summer Student Research Program,
  RIACS (Research Institute for Advanced Computer Science)/NASA Ames
  Research Center, Robust Software Engineering group:} Invented and
  implemented methods for error explanation, using model checking
  counterexamples to provide automatic feedback about the causes and
  location of errors in Java programs, applied to Honeywell's DEOS
  real-time operating system and an autopilot system.

  \item {\bf 5/2001--8/2001 $\cdot$ Summer Student Research Program,
  RIACS/NASA Ames Research Center, Robust Software Engineering group:}
  Invented and experimented with novel (and successful) heuristics for
  model checking Java programs; implemented heuristic search in the
  Java PathFinder 2 model checker, applied to DEOS real-time operating
  system.

  \item {\bf 5/2000--8/2000 $\cdot$  Research intern, Bell Laboratories (Murray Hill):}  Implemented black box checking algorithm (model checking for an unknown model using finite-state machine learning algorithms) and investigated theoretical aspects and applications of the algorithm to software model checking.

  \item {\bf 5/1999--8/1999 $\cdot$ Summer research assistant, SUNY Stony Brook:}  Continued work from the previous summer.

  \item {\bf 5/1998--8/1998 $\cdot$ Summer research assistant, North Carolina State University:}   Implemented a model checker based on Alternating B\"uchi Tableau Automata and developed logical optimizations for ABTAs.

\end{Experience}

\begin{Teaching}
\item {\bf Summary:} I have six semesters of experience as a teaching assistant for university-level courses, and developed and taught a class on software testing for undergraduates.  My teaching evaluations have been strongly positive.

  \item {\bf Spring 2008} $\cdot$ Lecturer, California Institute of
  Technology, \emph{CS 119 Reliable Software: Testing and Monitoring}
  (developed and taught with Klaus Havelund), third term 2007-2008.
  Topics included random testing, constraint-based testing, coverage
  measures, design for testability, test-driven development, automated
  debugging, and the use of model checkers for testing.  Focused on
  practical application (and limits) of state-of-the-art methods, with
  examples primarily drawn from JPL flight systems.

  \item  {\bf Spring 2007} $\cdot$ External Master's examiner, Stellenbosch University

   \item {\bf Fall 2003} $\cdot$ Teaching assistant, Carnegie Mellon
   University, for undergraduate course 15-212, \emph{Principles of
   Programming} (introduction to programming in SML, including type
   discipline and proof by induction): Formulated assignments, graded
   assignments and tests, taught a weekly recitation session, and held
   office hours.

   \item {\bf Spring 2000} $\cdot$ Teaching assistant, Carnegie Mellon
   University, for undergraduate course 15-312, \emph{Foundations of
   Programming Languages} (advanced type theory, continuations, and concurrency): Formulated tests and assignments, graded
   assignments and tests, lectured in absence of Professor Harper,
   taught a weekly recitation session, and held office hours.

   \item {\bf Fall 1998} $\cdot$ Teaching assistant, North Carolina
   State University, for undergraduate course CSC417, \emph{Theory of
   Programming Languages} (type theory and functional programming in ML):
   Graded assignments and held weekly office hours.

   \item {\bf Fall 1997, Spring 1998} $\cdot$ Teaching assistant,
   North Carolina State University, for undergraduate course CSC210,
   {\em Programming Concepts} (second-level introductory course in
   C++, including pointers, recursion, and fundamental data
   structures): Graded assignments, held weekly office hours, and
   provided on-the-spot teaching and assistance to students in
   computer labs.

   \item {\bf Spring 1997} $\cdot$ Teaching assistant, North
   Carolina State University, CSC495C, {\em
   Special Topics} (class for professional C programmers learning C++ and object-oriented design):  Graded assignments and held weekly office
   hours.

\end{Teaching}


\begin{Research Interests}
\item Software engineering: designing, specifying, \emph{coding}, \emph{testing}, \emph{verifying}, analyzing, and \emph{debugging} software written in widely used languages, such as C, C++, and Java, with a focus on critical embedded and systems software for aerospace applications.  In the spirit of Henry Petroski's proposal that progress in engineering arises from understanding failures, I believe that a deeper understanding of {\bf bugs} is essential to better \emph{software engineering} (and thus more reliable systems) and better software engineering education.
\begin{Topics}
\item{\bf Easing Communication in Aerospace Systems Development:}  Poor communication of requirements and expected behaviors between hardware designers, embedded software engineers, and aerospace or systems engineers often troubles the design and testing of complex aerospace systems.  Preliminary work with the Mars Science Laboratory mission at JPL suggests that stating system requirements as event patterns may aid engineers in understanding and help automate the testing of hardware/software interfaces.
\item {\bf Software testing:} I am exploring the effectiveness and relative ease of (randomized) testing, and the relationship between testing, runtime verification or dynamic analysis, and model checking using unsound abstractions --- including shared models and frameworks for testing and model checking and strategies based on constraint-solving.
\item {\bf Software model checking:}  I continue to investigate the use of SAT solvers for bounded model checking (CBMC), predicate abstraction-based approaches (MAGIC, SATABS), and explicit-state exploration with SPIN and Java PathFinder. 
\item {\bf Error explanation:}   I developed automatic tools for \emph{explaining} and \emph{localizing} errors in C and Java source code.  Understanding and correcting errors can be as difficult and costly as implementation or design, and better methods and algorithms are critical to an improved software development experience.
\item{\bf Educational use of software analysis tools:}  I am interested in incorporating mature, robust ``research'' tools for software design, debugging, and verification (model checking, random testing, delta-debugging, etc.) into software engineering education:  I believe such tools not only make for better software engineering practice, but make the experience of programming more rewarding and interesting to students.
\end{Topics}
\end{Research Interests}


\begin{Honors}
  \item JPL Spot Award (for Multi Mission System Architecture Platform
  (MSAP) File System Testing), 2006 \item ICSE 2003 ACM SIGSOFT
  Distinguished Paper Award \item NASA ``Engineering Innovation''
  Turning Goals Into Reality (TGIR) Award 2003 (Java PathFinder team)
  \item National Science Foundation Graduate Fellowship \item NCSU
  Class of 1999 College of Humanities and Social Sciences Scholar
  (valedictorian for CHASS) \item Phi Beta Kappa
\end{Honors}

\begin{Professional Activities}
  \item Reviewer for \emph{IEEE Transactions on Software Engineering} (TSE), \emph{ACM
   Transactions
   on  Software  Engineering  and  Methodology} (TOSEM), \emph{Journal of the ACM} (JACM), \emph{Microprocessors and Microsystems: Embedded Hardware Design},
  \emph{Software Tools for Technology Transfer} (STTT), \emph{Formal Methods in System Design} (FMSD), \emph{IEEE Transactions on Parallel and Distributed Systems} (TPDS), \emph{Journal on Satisfiability, Boolean Modeling and Computation} (JSAT), \emph{Journal of Logic and Computation}, \emph{Journal of Computer and System Sciences} (JCSS), \emph{Software Testing, Verification and Reliability}, \emph{Computer Aided
  Verification} (CAV), \emph{International Conference on Tools and Algorithms for the Construction and Analysis of Systems} (TACAS), \emph{ACM SIGSOFT Symposium on the Foundations of Software Engineering} (FSE), \emph{IEEE/ACM International Conference on Automated Software Engineering} (ASE), \emph{ACM/IEEE International Conference on Software Engineering} (ICSE), \emph{ACM SIGPLAN - SIGACT Symposium on Principles of Programming Languages} (POPL), \emph{ACM SIGPLAN Conference on Programming Language Design and Implementation} (PLDI), \emph{Verification, Model Checking, and Abstract Interpretation} (VMCAI), \emph{Symposium on Automated and Analysis-driven Debugging} (AADEBUG), \emph{Formal Techniques for Networked and Distributed Systems} (FORTE), \emph{Asia and South Pacific Design Automation Conference} (ASP-DAC), \emph{Logic for Programming, Artificial Intelligence, and Reasoning} (LPAR), \emph{Formal Methods in Computer-Aided Design} (FMCAD), \emph{SPIN Workshop on Model Checking of Software}, \emph{Workshop on Model Checking and Artificial Intelligence} (MoChArt), \emph{Specification and Verification of Component-Based Systems} (SAVCBS), \emph{Workshop on Verification and Debugging} (V\&D), and \emph{Workshop on Software Model Checking} (SoftMC).
  \item Association for Computing Machinery, Special Interest Group on Software Engineering (ACM SIGSOFT) member.
\item External Reviewer for Natural Sciences and Engineering Research Council of Canada.
\item Reviewer for NASA Small Business Innovation Research (SBIR) program.
\item External Reviewer for Israel Science Foundation.
\item External Reviewer for South African National Research Foundation.
\end{Professional Activities}

\begin{Panel and Committee Service}
\item Program committee $\cdot$ 6th International Workshop on Constraints in Formal Verification (CFV'09), Grenoble, France, June 2009.
\item Program committee $\cdot$ 7th Workshop on Specification and Verification of Component-Based Systems (SAVCBS'08), Atlanta, Georgia, November 2008.
\item Program committee $\cdot$ 14th International Workshop on Model Checking Software (SPIN'07), Berlin, Germany, July 2007.
\item Program committee $\cdot$ 1st International Workshop on Verification and Debugging (V\&D'06), Seattle, Washington, August 2006.
\end{Panel and Committee Service}

\begin{Journal Publications}
\item
{\bf Alex Groce} and Rajeev Joshi.
\newblock Exploiting Traces in Static Program Analysis: Better Model Checking through \emph{printf}s.
\newblock \emph{International Journal on Software Tools for Technology Transfer}, 10(2):131-144, March 2008.
\item
{\bf Alex Groce}, Doron Peled, and Mihalis Yannakakis.
\newblock Adaptive Model Checking.
\newblock \emph{Logic Journal of the IGPL}, 14(5):729-744, October 2006.

\item
{\bf Alex Groce}, Sagar Chaki, Daniel Kroening, and Ofer Strichman.
\newblock Error Explanation with Distance Metrics.
\newblock \emph{International Journal on Software Tools for Technology Transfer}, 8(3):229-247, June 2006.

\item
{\bf Alex Groce} and Willem Visser.
\newblock Heuristics for Model Checking Java Programs.
\newblock \emph{International Journal on Software Tools for Technology Transfer}, 6(4):260--276, August 2004.


\item
Sagar Chaki, Edmund Clarke, {\bf Alex Groce}, Joel Ouaknine, Ofer Strichman, and Karen Yorav.
\newblock Efficient Verification of Sequential and Concurrent C Programs.
\newblock \emph{Formal Methods in System Design, Special Issue on Software Model Checking}, 25(2-3):129--166, September-November 2004.

\item
Sagar Chaki, Edmund Clarke, {\bf Alex Groce}, Somesh Jha, and Helmut Veith.
\newblock Modular Verification of Software Components in C.
\newblock \emph{IEEE Transactions on Software Engineering}, 30(6):388--402, June 2004.

\end{Journal Publications}

\begin{Refereed Conference and Workshop Publications}

\item
James Andrews, {\bf Alex Groce}, Melissa Weston, and Ru-Gang Xu.
\newblock Random Test Run Length and Effectiveness.
\newblock \emph{IEEE/ACM International Conference on Automated Software Engineering}, pages 19--28, L'Aquila, Italy, September 2008.

\item
Gerard Holzmann, Rajeev Joshi, and {\bf Alex Groce}.
\newblock Tackling Large Verification Problems with the Swarm Tool.
\newblock \emph{SPIN Workshop on Model Checking of Software}, pages 134--143, Los Angeles, California, August 2008.

\item
Klaus Havelund, {\bf Alex Groce}, Gerard Holzmann, Rajeev Joshi, and Margaret Smith.
\newblock Automated Testing of Planning Models.
\newblock \emph{Workshop on Model Checking and Artificial Intelligence}, Patras, Greece, July 2008.

\item
{\bf Alex Groce} and Rajeev Joshi.
\newblock Random Testing and Model Checking:   Building a Common Framework for Nondeterministic Exploration.
\newblock \emph{Workshop on Dynamic Analysis}, pages 22--28, Seattle, Washington, July 2008.


\item
{\bf Alex Groce} and Rajeev Joshi.
\newblock Extending Model Checking with Dynamic Analysis.
\newblock \emph{Conference on Verification, Model Checking and Abstract Interpretation}, pages 142--156, San Francisco, California, January 2008.


\item
Nicolas Blanc, {\bf Alex Groce}, and Daniel Kroening.
\newblock Verifying C++ with STL Containers via Predicate Abstraction.
\newblock \emph{IEEE/ACM International Conference on Automated Software Engineering}, pages 521--524, Atlanta, Georgia, November 2007.


\item
{\bf Alex Groce}, Gerard Holzmann, and Rajeev Joshi.
\newblock Randomized Differential Testing as a Prelude to Formal Verification.
\newblock \emph{ACM/IEEE International Conference on Software Engineering}, pages 621--631, Minneapolis, Minnesota, May 2007.

\item
{\bf Alex Groce} and Rajeev Joshi.
\newblock Exploiting Traces in Program Analysis.
\newblock \emph{International Conference on Tools and Algorithms for the Construction and Analysis of Systems}, pages 379--393, Vienna, Austria, March-April 2006.

\item
Daniel Kroening, {\bf Alex Groce}, and Edmund Clarke.
\newblock Counterexample Guided Abstraction Refinement via Program Execution.
\newblock \emph{International Conference on
   Formal Engineering Methods},  pages 224--238, Seattle, Washington, November 2004.

\item
Sagar Chaki, {\bf Alex Groce}, and Ofer Strichman.
\newblock Explaining Abstract Counterexamples.
\newblock \emph{ACM SIGSOFT International Symposium on the Foundations of Software Engineering},  pages 73--82, Newport Beach, California, October-November 2004.

\item
{\bf Alex Groce} and Daniel Kroening.
\newblock Making the Most of BMC Counterexamples.
\newblock \emph{Workshop on Bounded Model Checking},  pages 71--84, Boston, Massachusetts, July 2004.

\item
{\bf Alex Groce}, Daniel Kroening, and Flavio Lerda.
\newblock Understanding Counterexamples with {\tt explain}.
\newblock \emph{International Conference on Computer Aided Verification},  pages 453--456, Boston, Massachusetts, July 2004.

\item
{\bf Alex Groce}.
\newblock Error Explanation with Distance Metrics.
\newblock \emph{International Conference on Tools and Algorithms for the Construction and Analysis of Systems}, pages 108--122, Barcelona, Spain, March-April 2004.


\item
Edjard Mota, Edmund Clarke, W. Oliveira, {\bf Alex Groce}, J. Kanda, and M. Falcao.
\newblock VeriAgent: an Approach to Integrating UML and Formal Verification Tools.
\newblock \emph{Brazilian Workshop on Formal Methods}, Universidade Federal de Campina Grande, Brazil, October 2003.

\item
Sagar Chaki, Edmund Clarke, {\bf Alex Groce}, and Ofer Strichman.
\newblock Predicate Abstraction with Minimum Predicates.
\newblock \emph{Advanced Research Working Conference on Correct Hardware Design and Verification Methods}, pages 19--34, L'Aquila, Italy, October 2003.


\item
{\bf Alex Groce} and Willem Visser.
\newblock What Went Wrong: Explaining Counterexamples.
\newblock \emph{SPIN Workshop on Model Checking of Software}, pages 121--135, Portland, Oregon, May 2003.

\item 
Sagar Chaki, Edmund Clarke, {\bf Alex Groce}, Somesh Jha, and Helmut Veith.
\newblock Modular Verification of Software Components in C.
\newblock \emph{ACM/IEEE International Conference on Software Engineering}, pages 385--395, Portland, Oregon, May 2003 {\bf [ICSE SIGSOFT Distinguished Paper Award]}.

\item
{\bf Alex Groce}, Doron Peled, and Mihalis Yannakakis.
\newblock AMC: An Adaptive Model Checker.
\newblock \emph{International Conference on Computer Aided Verification}, pages 521-525, Copenhagen, Denmark, July 2002.

\item
{\bf Alex Groce} and Willem Visser.
\newblock Model Checking Java Programs using Structural Heuristics.
\newblock \emph{ACM International Symposium on Software Testing and Analysis}, pages 12--21, Rome, Italy, July 2002.

\item
{\bf Alex Groce} and Willem Visser.
\newblock Heuristic Model Checking for Java Programs.
\newblock \emph{SPIN Workshop on Model Checking of Software}, pages 242--245, Grenoble, France, April 2002.

\item
{\bf Alex Groce}, Doron Peled, and Mihalis Yannakakis.
\newblock Adaptive Model Checking.
\newblock \emph{International Conference on Tools and Algorithms for the Construction and Analysis of Systems}, pages 357--370, Grenoble, France, April 2002.

\item
Girish Bhat, Rance Cleaveland, and {\bf Alex Groce}.
\newblock Efficient Model Checking Via B\"uchi Tableau Automata.
\newblock \emph{International Conference on Computer Aided Verification}, pages 38--52, Paris, France, July 2001.
\end{Refereed Conference and Workshop Publications}

\begin{Invited Papers}

\item Gerard Holzmann, Rajeev Joshi, and {\bf Alex Groce}.
\newblock Model Driven Code Checking.
\newblock \emph{Automated Software Engineering, Special Issue on Trends in Automated Software Engineering}, 15(3-4):283-197, December 2008.

\item Gerard Holzmann, Rajeev Joshi, and {\bf Alex Groce}.
\newblock Swarm Verification.
\newblock \emph{IEEE/ACM International Conference on Automated Software Engineering}, pages 1--6, L'Aquila, Italy, September 2008.

\item {\bf Alex Groce}, Gerard Holzmann, Rajeev Joshi, and Ru-Gang Xu.
\newblock Putting Flight Software Through the Paces with Testing, Model Checking, and Constraint-Solving.
\newblock \emph{International Workshop on Constraints in Formal Verification}, pages 1--15, Sydney, Australia, August 2008.

\item
Gerard Holzmann, Rajeev Joshi, and {\bf Alex Groce}.
\newblock New Challenges in Model Checking.
\newblock \emph
{25 Years of Model Checking}, pages 65--76, Seattle, Washington, August 2006.
\end{Invited Papers}

\begin{Technical Reports}
\item
Nicolas Blanc, Daniel Kroening, and {\bf Alex Groce}.
\newblock Verifying C++ with STL Containers via Predicate Abstraction.
\newblock Technical Reports 506, ETH Z\"urich, January 2006.

\item
{\bf Alex Groce}.
\newblock Error Explanation and Fault Localization with Distance Metrics.
\newblock (Ph.D. Thesis) Technical Report CMU-CS-05-121, Carnegie Mellon University, March 2005.

\item
{\bf Alex Groce}, Doron Peled, and Mihalis Yannakakis.
\newblock {AMC:} An Adaptive Model Checker.
\newblock ALR-2002-008, Avaya Labs Research, February 2002.

\item
{\bf Alex Groce} and Willem Visser.
\newblock What Went Wrong: Explaining Counterexamples.
\newblock Technical Report 02-08, RIACS, USRA, February 2002.

\item
{\bf Alex Groce}, Doron Peled, and Mihalis Yannakakis.
\newblock Adaptive Model Checking.
\newblock ALR-2002-002, Avaya Labs Research, January 2002.

\item
Sergey Berezin and {\bf Alex Groce}.
\newblock SyMP: The Hacker's Manual.
\newblock Carnegie Mellon University, web publication, May 12, 2001 (\url{http://www.cs.cmu.edu/~modelcheck/symp.html}).

\item
Sergey Berezin and {\bf Alex Groce}.
\newblock SyMP: The User's Guide.
\newblock Carnegie Mellon University, web publication, December 27, 2000 (\url{http://www.cs.cmu.edu/~modelcheck/symp.html}).
\end{Technical Reports}

\begin{Invited Seminars}
  \item Dagstuhl Seminar 03491, Understanding Program Dynamics, Schloss Dagstuhl, Wadern, Germany, November 31-December 5, 2003.
\end{Invited Seminars}

\begin{Invited Talks}
\item ``Putting Flight Software Through the Paces with Testing, Model Checking, and Constraint-Solving,'' International Workshop on Constraints in Formal Verification / International Verification Workshop, Sydney, Australia, August 11, 2008.
\end{Invited Talks}

\begin{Selected Presentations}
\item ``Random Testing and Model Checking:   Building a Common Framework for Nondeterministic Exploration,'' Workshop on Dynamic Analysis, Seattle, WA, July 21, 2008.

\item ``Model-Driven Software Verification Methods,'' LaRS Advisory Committee Meeting, Jet Propulsion Laboratory, Pasadena, CA, June 26, 2008.

\item ``Asking the Right Questions --- and Understanding the Answers --- in Software Testing,'' (with Klaus Havelund), Information Science and Technology Lunch Bunch, California Institute of Technology, Pasadena, CA, February 19, 2008.

\item ``Model Checking, Dynamic Analysis, and Unsound Abstractions,'' Southern California Workshop on Programming Languages and Systems, Claremont, CA, February 2, 2008.

\item ``Extending Model Checking with Dynamic Analysis,'' Verification, Model Checking and Abstract Interpretation, San Francisco, CA, January 8, 2008.

\item ``Model-Driven Verification,'' Mission Computing and Autonomy Systems Research Program (982) FY07 Year End Review, Jet Propulsion Laboratory, Pasadena, CA, October 3, 2007.

\item ``Testing the Kepler Flash File System,'' LaRS Advisory Committee Meeting, Jet Propulsion Laboratory, Pasadena, CA, July 27, 2007.

\item ``Randomized Differential Testing as a Prelude to Formal Verification,'' ACM/IEEE International Conference on Software Engineering, Minneapolis, MN, May 24, 2007.

\item ``Strengthening Software Testing,'' LaRS Advisory Committee Meeting, Jet Propulsion Laboratory, Pasadena, CA, July 26, 2006.  Similar version presented as Section 316 Brown Bag Lecture at JPL on August 23, 2006.

\item ``LaRS File System Test Approach,'' Flight Software Applications and Data Management (316D) Group Meeting, Jet Propulsion Laboratory, Pasadena, CA, May 16, 2006.

\item ``How to Break a (Flash) File System,'' Jet Propulsion Laboratory-Goddard Space Flight Center (JPL-GSFC) Quality Mission Software Workshop, Santa Barbara, CA, May 2, 2006.

 \item ``Exploiting Traces in Program Analysis,'' International Conference on Tools and Algorithms for the Construction and Analysis of Systems, Vienna, Austria, March 29, 2006.

 \item ``Exploiting Traces in Program Analysis,'' Workshop on Theories, Methods and Tools for Building Systems from Interacting Components, California Institute of Technology, Pasadena, CA, October 31, 2005.

 \item ``Bounded Model Checking Explained,'' LaRS Seminar, Jet Propulsion Laboratory, Pasadena, CA, June 14, 2005.

 \item ``Error Explanation and Fault Localization with Distance Metrics,'' Thesis Oral, Carnegie Mellon University, Pittsburgh, PA, March 3, 2005.

  \item ``Explaining Counterexamples,'' IBM T. J. Watson Research Center, Hawthorne, NY, December 20, 2004.

  \item ``Counterexample Guided Abstraction Refinement via Program Execution,'' International Conference on Formal Engineering Methods, Seattle, WA, November 11, 2004.

  \item ``Explaining Counterexamples,'' Microsoft Research, Redmond, WA, November 8, 2004.  Similar version presented as Speakers' Club seminar at Carnegie Mellon University, Pittsburgh, PA, December 9, 2004.

  \item ``Explaining Abstract Counterexamples,''ACM SIGSOFT International Symposium on the Foundations of Software Engineering, Newport Beach, CA, November 2, 2004.

  \item ``Debugging Code with Model Checkers,'' Jet Propulsion Laboratory, Pasadena, CA, November 1, 2004.

  \item ``CBMC and C Model Checking,'' MURI (Multidisciplinary University Research Initiative) Review Meeting, Annapolis, MD, August 16, 2004.

  \item ``Java PathFinder,'' Software Model Checking Seminar, Carnegie Mellon University, Pittsburgh, PA, July 22, 2004.

  \item ``Error Explanation with Distance Metrics,'' International Conference on Tools and Algorithms for the Construction and Analysis of Systems, Barcelona, Spain, March 29, 2004.  


  \item ``Error Explanation via Model Checking,''  Dagstuhl Seminar 03491, Understanding Program Dynamics, Schloss Dagstuhl, Wadern, Germany, December 5, 2003.

  \item ``Explaining Errors,'' MURI Workshop, Carnegie Mellon University, Pittsburgh, PA, July 22, 2003.

  \item ``Explaining Counterexamples: Causal Analysis and Comparison of Transition Sequences,''  Specification and Verification Center, Carnegie Mellon University, Pittsburgh, PA, May 20, 2003.

  \item ``What Went Wrong: Explaining Counterexamples,''  SPIN Workshop on Model Checking of Software, Portland, OR, May 9, 2003.  Earlier versions presented at Specification and Verification Center, Carnegie Mellon University, Pittsburgh, PA, September 17, 2002, and NASA Ames Research Center/RIACS Seminar, Mountain View, CA, August 8, 2002.

%  \item ``What Went Wrong?''  Specification and Verification Center, Carnegie Mellon University, Pittsburgh, PA, September 17, 2002.

%\item ''What Went Wrong?''  NASA Ames Research Center/RIACS Seminar, Mountain View, CA, August 8, 2002.

  \item ``Model Checking Java Programs using Structural Heuristics,''  International Symposium on Software Testing and Analysis, Rome, Italy, July 22, 2002.

  \item ``Heuristic Model Checking for Java Programs,''  SPIN Workshop on Model Checking of Software, Grenoble, France, April 13, 2002.

  \item ``Adaptive Model Checking,''  International Conference on Tools and Algorithms for the Construction and Analysis of Systems, Grenoble, France, April 11, 2002.

  \item ``Structural Heuristics for Directed Model Checking of Java Programs,''  Specification and Verification Center, Carnegie Mellon University, Pittsburgh PA,  March 19, 2002.

  \item ``Efficient Model Checking Via B\"uchi Tableau Automata,''  International Conference on Computer Aided Verification, Paris, France, July 19, 2001.     

  \item ``Black Box Checking,''  Federal University of Rio Grande do Norte, Natal, Brazil, March 29, 2001.

\end{Selected Presentations}

\begin{References}
Edmund M. Clarke, Jr. \\
FORE Systems Professor of Computer Science \\
Computer Science Department \\
Carnegie Mellon University \\
5000 Forbes Avenue \\
Pittsburgh, PA 15213-3891 \\
412-268-2628\\
{\it emc+@cs.cmu.edu}

\and

Gerard J. Holzmann \\
%NASA/JPL Laboratory for Reliable Software \\
4800 Oak Grove Drive \\
M/S 301-230 \\
Pasadena, CA 91109 \\
818-393-5937 \\
{\it Gerard.J.Holzmann@jpl.nasa.gov}

\and

Willem Visser \\
SEVEN Networks\\
Redwood City, CA 94063\\
408-971-1512\\
{\it willem@gmail.com}

%\and

%Dr. Doron Peled \\
%Professor of Software Engineering \\
%Department of Computer Science \\
%The University of Warwick \\
%Coventry, CV4 7AL \\
%United Kingdom \\
%+44(24)7657 3796 

%
%\and
%
%Dr. Rance Cleaveland\\
%Professor \\
%Department of Computer Science \\
%State University of New York at Stony Brook \\
%Stony Brook, NY 11794-4400 \\
%631-632-8448 \\
%
\end{References}
\end{vita}
\end{document}
